[
  {
    "objectID": "Homework 3.html",
    "href": "Homework 3.html",
    "title": "Control Flow and Functions",
    "section": "",
    "text": "#Task 1: Control Flow Practice\nFor this task I will utilize for loops to manipulate a list.\nFirst, I need to load the R objects I will manipulate.\n\n#Loading R Objects\nload(\"hw2_list.rda\")\n\n\n1.\nWe want to characterize post-treatment blood pressure status for the treatment and placebo/control groups. To do so, we need to create columns each data frame within the list bp_list. Each data frame is printed below to demonstrate that we have added an empty character column, called status, to them.\n\n#Creating new character column in treatment data frame\nbp_list$treatment$status &lt;- character(20) \n\n#Printing updated data frame\nbp_list$treatment\n\n              patient pre_bp post_bp diff_bp normal status\nSubject_1   Subject_1    120     127      -7  FALSE       \nSubject_2   Subject_2    151     145       6  FALSE       \nSubject_3   Subject_3    125     135     -10  FALSE       \nSubject_4   Subject_4    126     122       4  FALSE       \nSubject_5   Subject_5    115     115       0   TRUE       \nSubject_6   Subject_6    132     122      10  FALSE       \nSubject_7   Subject_7    132     123       9  FALSE       \nSubject_8   Subject_8    129     126       3  FALSE       \nSubject_9   Subject_9    134     126       8  FALSE       \nSubject_10 Subject_10    139     129      10  FALSE       \nSubject_11 Subject_11    127     132      -5  FALSE       \nSubject_12 Subject_12    122     146     -24  FALSE       \nSubject_13 Subject_13    127     120       7  FALSE       \nSubject_14 Subject_14    135     114      21   TRUE       \nSubject_15 Subject_15    133     121      12  FALSE       \nSubject_16 Subject_16    128     120       8  FALSE       \nSubject_17 Subject_17    147     128      19  FALSE       \nSubject_18 Subject_18    138     120      18  FALSE       \nSubject_19 Subject_19    140     133       7  FALSE       \nSubject_20 Subject_20    132     115      17   TRUE       \n\n#Creating new character column in placebo data frame\nbp_list$placebo$status &lt;- character(10)\n\n#Printing updated data frame\nbp_list$placebo\n\n      patient pre_bp post_bp diff_bp normal status\n1   Subject_1    138     105      33   TRUE       \n2   Subject_2    135     136      -1  FALSE       \n3   Subject_3    147     123      24  FALSE       \n4   Subject_4    117     130     -13  FALSE       \n5   Subject_5    152     134      18  FALSE       \n6   Subject_6    134     143      -9  FALSE       \n7   Subject_7    114     135     -21  FALSE       \n8   Subject_8    121     139     -18  FALSE       \n9   Subject_9    131     120      11  FALSE       \n10 Subject_10    130     124       6  FALSE       \n\n\n\n\n2.\nNext, we need to assign the correct status label for each patient in the treatment group. The resultant data frame (still an element of bp_list) is printed below.\n\n#Creating for loop to assign correct status label to each subject\nfor (i in 1:length(bp_list$treatment$status)) {\n  if (bp_list$treatment$post_bp[i] &lt;= 120) {\n    bp_list$treatment$status[i]&lt;-\"optimal\" #Assigning \"optimal\" to low-BP group\n  } else if ((bp_list$treatment$post_bp[i] &gt; 120) & (bp_list$treatment$post_bp[i] &lt;= 130)) {\n    bp_list$treatment$status[i]&lt;-\"borderline\" #Assigning \"borderline\" to moderate-BP group\n  } else if (bp_list$treatment$post_bp[i] &gt; 130) {\n    bp_list$treatment$status[i]&lt;-\"high\" #Assigning \"high\" to high-BP group\n  }\n}\n\n#Printing updated data frame\nbp_list$treatment\n\n              patient pre_bp post_bp diff_bp normal     status\nSubject_1   Subject_1    120     127      -7  FALSE borderline\nSubject_2   Subject_2    151     145       6  FALSE       high\nSubject_3   Subject_3    125     135     -10  FALSE       high\nSubject_4   Subject_4    126     122       4  FALSE borderline\nSubject_5   Subject_5    115     115       0   TRUE    optimal\nSubject_6   Subject_6    132     122      10  FALSE borderline\nSubject_7   Subject_7    132     123       9  FALSE borderline\nSubject_8   Subject_8    129     126       3  FALSE borderline\nSubject_9   Subject_9    134     126       8  FALSE borderline\nSubject_10 Subject_10    139     129      10  FALSE borderline\nSubject_11 Subject_11    127     132      -5  FALSE       high\nSubject_12 Subject_12    122     146     -24  FALSE       high\nSubject_13 Subject_13    127     120       7  FALSE    optimal\nSubject_14 Subject_14    135     114      21   TRUE    optimal\nSubject_15 Subject_15    133     121      12  FALSE borderline\nSubject_16 Subject_16    128     120       8  FALSE    optimal\nSubject_17 Subject_17    147     128      19  FALSE borderline\nSubject_18 Subject_18    138     120      18  FALSE    optimal\nSubject_19 Subject_19    140     133       7  FALSE       high\nSubject_20 Subject_20    132     115      17   TRUE    optimal\n\n\n\n\n3.\nFinally, we need to assign the correct status label for each patient that received the placebo. The resultant data frame (still an element of bp_list) is printed below.\n\n#Creating for loop to assign correct status label to each subject\nfor (i in 1:length(bp_list$placebo$status)) {\n  if (bp_list$placebo$post_bp[i] &lt;= 120) {\n    bp_list$placebo$status[i]&lt;-\"optimal\" #Assigning \"optimal\" to low-BP group\n  } else if ((bp_list$placebo$post_bp[i] &gt; 120) & (bp_list$placebo$post_bp[i] &lt;= 130)) {\n    bp_list$placebo$status[i]&lt;-\"borderline\" #Assigning \"borderline\" to moderate-BP group\n  } else if (bp_list$placebo$post_bp[i] &gt; 130) {\n    bp_list$placebo$status[i]&lt;-\"high\"  #Assigning \"high\" to high-BP group\n  }\n}\n\n#Printing updated data frame\nbp_list$placebo\n\n      patient pre_bp post_bp diff_bp normal     status\n1   Subject_1    138     105      33   TRUE    optimal\n2   Subject_2    135     136      -1  FALSE       high\n3   Subject_3    147     123      24  FALSE borderline\n4   Subject_4    117     130     -13  FALSE borderline\n5   Subject_5    152     134      18  FALSE       high\n6   Subject_6    134     143      -9  FALSE       high\n7   Subject_7    114     135     -21  FALSE       high\n8   Subject_8    121     139     -18  FALSE       high\n9   Subject_9    131     120      11  FALSE    optimal\n10 Subject_10    130     124       6  FALSE borderline\n\n\n\n\nTask 2: Function Writing\nFor this task, we will write a function designed to take in lists such as ours and produce summary statistics.\n\n1.\n\n#Creating summary statistic function that takes in a list structured as bp_list \n#and exports the summary statistics of choice for pre_bp, post_bp, and diff_bp\n#for the treatment and control group\nsummarize&lt;-function(list,stat=\"mean\") {\n  #Capturing user-specified statistic\n  my_fun&lt;-get(stat)\n  \n  #Capturing names of each data frame in the list\n  df_names&lt;-names(list)\n  \n  #Creating initial vectors for final summary statistic values and metric \"names\"\n  values&lt;-c()\n  value_names&lt;-c()\n  \n  #Setting initial iteration value to keep up with iteration count in loop\n  iter&lt;-1\n  \n  #Running loop to calculate summary statistic values and assign appropriate names\n    #Looping across data frame and columns (within each data frame)\n  for (i in df_names) {\n    for (j in c(\"pre_bp\",\"post_bp\",\"diff_bp\")) {\n      values[iter]&lt;-my_fun(list[[i]][,j]) #Generating summary statistic value\n      value_names[iter]&lt;-paste(i,j,stat,sep=\"_\") #Generating appropriate metric name\n      iter&lt;-iter+1 #Updating iteration count\n    }\n  }\n  \n  #Assigning names to summary statistic values vector\n  names(values)&lt;-value_names\n  \n  #Returning vector of summary statistic values\n  return(values)\n}\n\n#Generating sample means for bp_list\nsummarize(bp_list)\n\n treatment_pre_bp_mean treatment_post_bp_mean treatment_diff_bp_mean \n                131.60                 125.95                   5.65 \n   placebo_pre_bp_mean   placebo_post_bp_mean   placebo_diff_bp_mean \n                131.90                 128.90                   3.00 \n\n#Generating sample variances for bp_list\nsummarize(bp_list,stat=\"var\")\n\n treatment_pre_bp_var treatment_post_bp_var treatment_diff_bp_var \n             75.72632              78.99737             117.81842 \n   placebo_pre_bp_var   placebo_post_bp_var   placebo_diff_bp_var \n            149.87778             124.98889             341.33333 \n\n#Generating sample standard deviations for bp_list\nsummarize(bp_list,stat=\"sd\")\n\n treatment_pre_bp_sd treatment_post_bp_sd treatment_diff_bp_sd \n            8.702087             8.888046            10.854419 \n   placebo_pre_bp_sd   placebo_post_bp_sd   placebo_diff_bp_sd \n           12.242458            11.179843            18.475209 \n\n#Generating sample minimums for bp_list\nsummarize(bp_list,stat=\"min\")\n\n treatment_pre_bp_min treatment_post_bp_min treatment_diff_bp_min \n                  115                   114                   -24 \n   placebo_pre_bp_min   placebo_post_bp_min   placebo_diff_bp_min \n                  114                   105                   -21 \n\n#Generating sample maximums for bp_list\nsummarize(bp_list,stat=\"max\")\n\n treatment_pre_bp_max treatment_post_bp_max treatment_diff_bp_max \n                  151                   146                    21 \n   placebo_pre_bp_max   placebo_post_bp_max   placebo_diff_bp_max \n                  152                   143                    33"
  }
]